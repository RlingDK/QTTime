{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f5\fswiss\fprq0\fcharset128 Liberation Sans{\*\falt Arial};}{\f6\fnil\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f7\fnil\fprq0\fcharset128 FreeSans;}{\f8\fnil\fprq2\fcharset0 FreeSans;}{\f9\fswiss\fprq0\fcharset128 FreeSans;}{\f10\fnil\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\ql\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033 Normal;}
{\s1\sbasedon15\snext1\ql\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs36\alang1081\ab\loch\f5\fs36\lang1033 Heading 1;}
{\s2\sbasedon15\snext2\ql\nowidctlpar\sb200\sa120\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs32\alang1081\ab\loch\f5\fs32\lang1033 Heading 2;}
{\s3\sbasedon15\snext3\ql\nowidctlpar\sb140\sa120\keepn\ltrpar\cf2\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\ab\loch\f5\fs28\lang1033 Heading 3;}
{\s4\sbasedon15\snext4\ql\nowidctlpar\sb120\sa120\keepn\ltrpar\cf2\i\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs26\alang1081\ai\ab\loch\f5\fs26\lang1033 Heading 4;}
{\s5\sbasedon15\snext5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033 Heading 5;}
{\s7\sbasedon15\snext7\ql\nowidctlpar\sb60\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs22\alang1081\ab\loch\f5\fs22\lang1033 Heading 7;}
{\s8\sbasedon15\snext8\ql\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs28\lang1033 Heading 8;}
{\s9\sbasedon15\snext9\ql\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs28\lang1033 Heading 9;}
{\s15\sbasedon0\snext16\ql\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs28\lang1033 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f4\fs24\lang1033 List;}
{\s18\sbasedon0\snext18\ql\nowidctlpar\sb120\sa120\noline\ltrpar\cf1\i\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\ai\loch\f4\fs24\lang1033 Caption;}
{\s19\sbasedon0\snext19\ql\nowidctlpar\noline\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f4\fs24\lang1033 Index;}
{\s20\sbasedon0\snext20\ql\nowidctlpar\li567\ri567\lin567\rin567\fi0\sb0\sa283\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033 Quotations;}
{\s21\sbasedon15\snext21\qc\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs56\alang1081\ab\loch\f5\fs56\lang1033 Title;}
{\s22\sbasedon15\snext22\qc\nowidctlpar\sb60\sa120\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs36\alang1081\loch\f5\fs36\lang1033 Subtitle;}
{\s23\sbasedon15\snext23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033 Heading 10;}
}{\info{\creatim\yr2016\mo5\dy24\hr23\min53}{\revtim\yr2016\mo5\dy25\hr1\min56}{\printim\yr0\mo0\dy0\hr0\min0}{\comment LibreOffice}{\vern67241986}}\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s2\ql\nowidctlpar\sb200\sa120\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs32\alang1081\ab\loch\f5\fs32\lang1033\li576\ri0\lin576\rin0\fi-576\sb200\sa120{\cf1\alang1025\rtlch \ltrch\loch
The 3 day time planing project}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
This is a little project that implements an application that runs through a \uc2 \u8220\'81\'67hard coded\u8221\'81\'68 time plan. Though hard coded the time plan should be an object (so in a later version the user would be able pick or maybe even generate other time plans). The idea is to let the time planner follow a working regime I created after reading about the \uc1 }{{\*\bkmkstart firstHeading}{\*\bkmkend firstHeading}\cf1\alang1025\rtlch \ltrch\loch
Pomodoro technique.}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
The first time plan for the project}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
First day; I need to get an overview of the project first. I'll start on the documentation [2-3 hours]. Get some object and member candidates [1 hour].}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Second day; I need some experience with the domain. I'll create a pilot project [2-3 hours]. Testing out the most important features, the object structure and the G}{\cf1\alang1025\rtlch \ltrch\loch
ui}{\cf1\alang1025\rtlch \ltrch\loch
. Also I need to start on the code for first prototype [1 hour] while doing some design [1 hour].}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Third day; }{\cf1\alang1025\rtlch \ltrch\loch
Initial d}{\cf1\alang1025\rtlch \ltrch\loch
esign completed (more like stopped) [1 hour]. First prototype done [3-4 hours].}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033{\cf1\alang1025\rtlch \ltrch\loch
The second time plan for the project}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\rtlch \ltrch\loch
Added 3 extra days to make a more usable prototype.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Fourth day; Analyze structure (hopefully a class diagram) [1 hour]. Create first Gui [1-2 hours]. Might give the gtest another chance [1 hour].}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Fifth day; Analyzes use (hopefully get some use cases) [1 hour]. Prototype #2 [1-2 hours].}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Sixth day; Prototype #2 done [2 hours]. Make a time plan for a real implementation [2 hours].}
\par \pard\plain \s3\ql\nowidctlpar\sb140\sa120\keepn\ltrpar\cf2\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\ab\loch\f5\fs28\lang1033\li720\ri0\lin720\rin0\fi-720\sb140\sa120{\cf2\alang1025\rtlch \ltrch\loch
Introduction}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
The working regime}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The working regime I have created (heavily inspired by the Pomodoro technique) focuses on informing the user when a new time period starts (and an old one ends) and on handling whether or not a time period was completed (or failed). In the first hard coded version, the time plan will have two different types of time periods; a working period and a relaxation period. When the application keeps track of time (for the user), the user has a better change of focusing on the task at hand or relaxing. The ability to fail a time period, should in according to the theory (I have no proof of this claim) sharpen the focus on the working task. A working period is failed by not working on the task at hand e.g. being disturbed or starting something else, while a relaxing periods is failed by not relaxing e.g. doing or thing about something.}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
The hard coded time plan object}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
In the first version of the time plan object is a \uc2 \u8220\'81\'67soft start\u8221\'81\'68 time plan. Starting with 5 minutes of work, then 10 minutes, next 15 minutes and lastly 3 periods of 20 minutes of work. After each working period there is a 5 minutes relaxation period. If the user fails (indicated by user) a period, gets another try at the same period again, but when failing in the same period twice the plan \u8220\'81\'67takes a  step back\u8221\'81\'68 i.e. going back to the time period before the one just failed. E.g. if the 15 minute working period fails twice, the next period will be the 5 minute relaxation period (between the 10 and 15 minute working periods). If the user fails the 5 minute working period twice, the whole time plan is failed and user will be instructed the that a break of at least 30 minutes before starting anew.\uc1 }
\par \pard\plain \s3\ql\nowidctlpar\sb140\sa120\keepn\ltrpar\cf2\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\ab\loch\f5\fs28\lang1033\li720\ri0\lin720\rin0\fi-720\sb140\sa120{\cf2\alang1025\rtlch \ltrch\loch
Pilot project}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Before starting construction on the application, we want to make a \uc2 \u8220\'81\'67pre-prototype\u8221\'81\'68 (a pilot) to check out the object candidates (we might be able to use primitives), some of the mechanics (proof of concepts) and the information + work flow in the communication with the user (maybe more data needs to be stored).\uc1 }
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Time plan for the pilot project}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
This project has a very scarce time resource (3 days [3-4 hour a day = 9-12 hours]) and one third already used on documentation. This means that I can only spare 1-2 hours of work on pilot. }
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Foreknown}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
We already have some of the knowledge from the expectations described in the introduction above.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
I have decided that the time planner should have a graphical user interface (though simple), made in Qt and that the application should be able to play two \uc2 \u8220\'81\'67hard coded\u8221\'81\'68 sound files (one to indicate the start of a work period and one to indicate the start of a relaxation period). Also I'll use TDD (Test Driven Development).\uc1 }
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Existing examples}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The application looks like a watch, an egg-timer and a music player.}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Metaphors}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
...}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Objects and members}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Tracker (time left, plan), Player (play sound), Plan (list of periods, next period) and maybe a period (length, type, sound).}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\li1008\ri0\lin1008\rin0\fi-1008\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Results}
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\alang1025\rtlch \ltrch\loch
Testing}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
First of all the testing has to wait for another project. The time resources are very low for this project and though the testing might save me time over time, I have to take a change here, with the few resources left.}
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\alang1025\rtlch \ltrch\loch
Failing twice}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The implementation of the \uc2 \u8220\'81\'67can't fail the same time period twice\u8221\'81\'68 rule, is the interpretation that if a time period is completed all previous failures are erased. Another way to interpret the rule, is that the failures will be remembered and if it fails twice, this time period will be totally excluded from the plan. This will break the idea of alternating activities. With the erasing of previous failures \uc1 }{\cf1\alang1025\rtlch \ltrch\loch
(the first interpretation)}{\cf1\alang1025\rtlch \ltrch\loch
, the possibility for infinite planes is introduced (one period failing twice, going back a period, that then succeeds and then going }{\cf1\alang1025\rtlch \ltrch\loch
back up}{\cf1\alang1025\rtlch \ltrch\loch
 to the period where we started). My solution to this issue is to limit the total amount of time used on the plan. So when a plan is created a \uc2 \u8220\'81\'67max. time used\u8221\'81\'68 is set up. In this version, it is hard coded to 120 minutes (90 min. work and 30 min. relaxing).\uc1 }
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\rtlch \ltrch\loch
First and last element}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The time plan also needs to have either a fail or end period in both the beginning and the end of the time plan, else the plan runs \uc2 \u8220\'81\'67off the track\u8221\'81\'68 (start asking for periods beyond the first or \uc1 }{\cf1\alang1025\rtlch \ltrch\loch
after }{\cf1\alang1025\rtlch \ltrch\loch
the last period in the plan).}
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\rtlch \ltrch\loch
Minimum period time}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
When a sound is playing it takes time for it to complete. In order for user to hear the different sounds, I have decided to demand a minimum time }{\cf1\alang1025\rtlch \ltrch\loch
period }{\cf1\alang1025\rtlch \ltrch\loch
between each sound of 10 seconds. To insure this, each time period needs to be at least 10 seconds long and it is not allowed to fail a time period within the first 10 seconds.}
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\alang1025\rtlch \ltrch\loch
Sanity check}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The time plan needs to be checked. We need the plan to have special start and ends and we also need the plan to only hold periods with length of at least 10 seconds.}
\par \pard\plain \s23\ql\nowidctlpar\sb86\sa58\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\loch\f5\fs20\lang1033\sb86\sa58{\cf1\rtlch \ltrch\loch
Period pointer}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The plan needs to have a pointer that indicate how far into the plan the user is. A simple \uc2 \u8220\'81\'67next time period\u8221\'81\'68 and \u8220\'81\'67previous time period\u8221\'81\'68 method doesn't supply the needed information.\uc1 }
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140\cf1\rtlch \ltrch\loch

\par \pard\plain \s7\ql\nowidctlpar\sb60\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs22\alang1081\ab\loch\f5\fs22\lang1033\li1296\ri0\lin1296\rin0\fi-1296\sb60\sa60{\cf1\alang1025\rtlch \ltrch\loch
During implementation}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
For TDD, it helps to have a use case. So for the pilot we'll focus on the \uc2 \u8220\'81\'67next time period\u8221\'81\'68 mechanics and \uc1 }{\cf1\b0\alang1025\ab0\rtlch \ltrch\loch
representation}{\cf1\alang1025\rtlch \ltrch\loch
.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
The \uc2 \u8220\'81\'67next period\u8221\'81\'68 is in Plan, so I started by testing the methods of the Plan class.\uc1 }
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Never tried unit testing in C++ in Eclipse }{\cf1\alang1025\rtlch \ltrch\loch
(only used NUint in visual studio)}{\cf1\alang1025\rtlch \ltrch\loch
. Got into a lot of problems using gtest. Had to give up (seems to be a problem including the libgtest file), I only have limited time and though nice to have I still can have a result, without the testing.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
I don't like for the plan to be changed, while in use, so I'm making the time period list in Plan, private. The \uc2 \u8220\'81\'67encapsulation\u8221\'81\'68 should prevent other classes from changing the plan, while it's in use. In a later version a setter-method might be created together with an \uc1 }{\cf1\alang1025\rtlch \ltrch\loch
(in use) }{\cf1\alang1025\rtlch \ltrch\loch
indicator, that ensures that the plan isn't changed while in use, if the ability to choose a }{\cf1\alang1025\rtlch \ltrch\loch
new }{\cf1\alang1025\rtlch \ltrch\loch
plan }{\cf1\alang1025\rtlch \ltrch\loch
while running the plan }{\cf1\alang1025\rtlch \ltrch\loch
should ever be given to the user.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Added extra time period types to indicate when the whole plan either failed or succeed.}
\par \pard\plain \s3\ql\nowidctlpar\sb140\sa120\keepn\ltrpar\cf2\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\ab\loch\f5\fs28\lang1033\li720\ri0\lin720\rin0\fi-720\sb140\sa120{\cf2\alang1025\rtlch \ltrch\loch
Analyzes}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
System definition}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033{\cf1\alang1025\rtlch \ltrch\loch
There seems to be at least two (three) different types of systems that implements the needs described above. The first is the most obvious one, where we stick to a pure C++ solution. This system runs locally. Next we could use another device to interface with our C++ software (e.g. an Android app via a net-socket). In this system only the Gui part runs \uc2 \u8220\'81\'67outside\u8221\'81\'68 the C++ software. We could also use a website as Gui and run the C++ part via Cgi.\uc1 }
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033\sb120\sa60{\cf1\alang1025\rtlch \ltrch\loch
Objects}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\rtlch \ltrch\loch
Before drawing the class diagram we need to know which the main objects of the system are and there main purpose.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\rtlch \ltrch\loch
Plan\tab : Holds time periods, keeps track of the flow for the plan. }{\cf1\rtlch \ltrch\loch
The plan knows which time period is up next when the user succeeds the current time period and when the user fails the current time period. The plan knows when it's done and calculates when the max. time allowed to use on the time plan is used.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\rtlch \ltrch\loch
Timer\tab : Runs each }{\cf1\rtlch \ltrch\loch
of the }{\cf1\rtlch \ltrch\loch
time period}{\cf1\rtlch \ltrch\loch
s.}{\cf1\rtlch \ltrch\loch
 }{\cf1\rtlch \ltrch\loch
While running the time period, the timer }{\cf1\rtlch \ltrch\loch
updates }{\cf1\rtlch \ltrch\loch
the }{\cf1\rtlch \ltrch\loch
data }{\cf1\rtlch \ltrch\loch
that might change during the time period (e.g. time left of current time period and time used totally).}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\rtlch \ltrch\loch
Main\tab : Sets up the }{\cf1\rtlch \ltrch\loch
objects needed to run the system}{\cf1\rtlch \ltrch\loch
 and }{\cf1\rtlch \ltrch\loch
then loops}{\cf1\rtlch \ltrch\loch
 through }{\cf1\rtlch \ltrch\loch
the time plan, by making the timer run through the first period and then make the time plan find the next time period and then let the time run through that, until an ending has been found.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\rtlch \ltrch\loch
Period\tab : }{\cf1\rtlch \ltrch\loch
A practical entity that only h}{\cf1\rtlch \ltrch\loch
olds information. }{\cf1\rtlch \ltrch\loch
The period simulates the values of a time period.}
\par \pard\plain \s5\ql\nowidctlpar\sb120\sa60\keepn\ltrpar\cf1\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs23\alang1081\ab\loch\f5\fs23\lang1033{\cf1\alang1025\rtlch \ltrch\loch
Class diagram}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\rtlch \ltrch\loch
[Hand drawn \u8211\'3f might get scanned \u8211\'3f not that complex: Main has a Timer (run, update) and a Plan (next). Plan has a Vector of Period's]}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Sequence diagram, User patterns, Use cases, Dialog form, Needs}
\par \pard\plain \s3\ql\nowidctlpar\sb140\sa120\keepn\ltrpar\cf2\b\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1081\ab\loch\f5\fs28\lang1033\sb140\sa120{\cf2\rtlch \ltrch\loch
Implementation}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140{\cf1\alang1025\rtlch \ltrch\loch
Backlog, For version 1, Major milestones.}
\par \pard\plain \s16\sl288\slmult1\ql\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af6\langfe2052\dbch\af10\afs24\alang1081\loch\f4\fs24\lang1033\sb0\sa140\rtlch \ltrch\loch

\par }